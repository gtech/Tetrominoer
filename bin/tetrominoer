#!/usr/bin/env ruby
$: << File.join(File.dirname(__FILE__), "..", "lib")
require "tetrominoer"

module Tetrominoer


  o = O.new()
  l = L.new()
  r = R.new()
  i = I.new()
  s = S.new()
  z = Z.new()
  t = T.new()

  block_array = [l,r,i,o] #[o,l,r,i,s,z]
 # block_array = [s,z,r,l,o,i] #[o,l,r,i,s,z]
  #block_array = [s,z,r,l,o,i] #[o,l,r,i,s,z]
 # block_array = [s,z,r,l,o,i] #[o,l,r,i,s,z]
  rows = 4
  columns = 3
  
  pg = PossibilityGenerator.new(rows,columns)
  pg.generate_two(block_array)
  possibilities = pg.possibility_space

  solver = Solver.new(possibilities, block_array.length)
  solutions = solver.solve_two(possibilities)
  binding.pry
  if solutions
    printer = Printer.new(rows, columns)
    solutions.each do |solution| 
      puts ''
    printer.print(solution, block_array)
      puts ''
    end
    puts solutions.length
  else
    puts "Unsolvable"
  end

end
